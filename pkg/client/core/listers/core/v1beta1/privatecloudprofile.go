/*
Copyright SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/gardener/gardener/pkg/apis/core/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PrivateCloudProfileLister helps list PrivateCloudProfiles.
// All objects returned here must be treated as read-only.
type PrivateCloudProfileLister interface {
	// List lists all PrivateCloudProfiles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.PrivateCloudProfile, err error)
	// PrivateCloudProfiles returns an object that can list and get PrivateCloudProfiles.
	PrivateCloudProfiles(namespace string) PrivateCloudProfileNamespaceLister
	PrivateCloudProfileListerExpansion
}

// privateCloudProfileLister implements the PrivateCloudProfileLister interface.
type privateCloudProfileLister struct {
	indexer cache.Indexer
}

// NewPrivateCloudProfileLister returns a new PrivateCloudProfileLister.
func NewPrivateCloudProfileLister(indexer cache.Indexer) PrivateCloudProfileLister {
	return &privateCloudProfileLister{indexer: indexer}
}

// List lists all PrivateCloudProfiles in the indexer.
func (s *privateCloudProfileLister) List(selector labels.Selector) (ret []*v1beta1.PrivateCloudProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.PrivateCloudProfile))
	})
	return ret, err
}

// PrivateCloudProfiles returns an object that can list and get PrivateCloudProfiles.
func (s *privateCloudProfileLister) PrivateCloudProfiles(namespace string) PrivateCloudProfileNamespaceLister {
	return privateCloudProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PrivateCloudProfileNamespaceLister helps list and get PrivateCloudProfiles.
// All objects returned here must be treated as read-only.
type PrivateCloudProfileNamespaceLister interface {
	// List lists all PrivateCloudProfiles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.PrivateCloudProfile, err error)
	// Get retrieves the PrivateCloudProfile from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.PrivateCloudProfile, error)
	PrivateCloudProfileNamespaceListerExpansion
}

// privateCloudProfileNamespaceLister implements the PrivateCloudProfileNamespaceLister
// interface.
type privateCloudProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PrivateCloudProfiles in the indexer for a given namespace.
func (s privateCloudProfileNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.PrivateCloudProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.PrivateCloudProfile))
	})
	return ret, err
}

// Get retrieves the PrivateCloudProfile from the indexer for a given namespace and name.
func (s privateCloudProfileNamespaceLister) Get(name string) (*v1beta1.PrivateCloudProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("privatecloudprofile"), name)
	}
	return obj.(*v1beta1.PrivateCloudProfile), nil
}
