// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	core "github.com/gardener/gardener/pkg/apis/core"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakePrivateCloudProfiles implements PrivateCloudProfileInterface
type FakePrivateCloudProfiles struct {
	Fake *FakeCore
	ns   string
}

var privatecloudprofilesResource = core.SchemeGroupVersion.WithResource("privatecloudprofiles")

var privatecloudprofilesKind = core.SchemeGroupVersion.WithKind("PrivateCloudProfile")

// Get takes name of the privateCloudProfile, and returns the corresponding privateCloudProfile object, and an error if there is any.
func (c *FakePrivateCloudProfiles) Get(ctx context.Context, name string, options v1.GetOptions) (result *core.PrivateCloudProfile, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(privatecloudprofilesResource, c.ns, name), &core.PrivateCloudProfile{})

	if obj == nil {
		return nil, err
	}
	return obj.(*core.PrivateCloudProfile), err
}

// List takes label and field selectors, and returns the list of PrivateCloudProfiles that match those selectors.
func (c *FakePrivateCloudProfiles) List(ctx context.Context, opts v1.ListOptions) (result *core.PrivateCloudProfileList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(privatecloudprofilesResource, privatecloudprofilesKind, c.ns, opts), &core.PrivateCloudProfileList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &core.PrivateCloudProfileList{ListMeta: obj.(*core.PrivateCloudProfileList).ListMeta}
	for _, item := range obj.(*core.PrivateCloudProfileList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested privateCloudProfiles.
func (c *FakePrivateCloudProfiles) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(privatecloudprofilesResource, c.ns, opts))

}

// Create takes the representation of a privateCloudProfile and creates it.  Returns the server's representation of the privateCloudProfile, and an error, if there is any.
func (c *FakePrivateCloudProfiles) Create(ctx context.Context, privateCloudProfile *core.PrivateCloudProfile, opts v1.CreateOptions) (result *core.PrivateCloudProfile, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(privatecloudprofilesResource, c.ns, privateCloudProfile), &core.PrivateCloudProfile{})

	if obj == nil {
		return nil, err
	}
	return obj.(*core.PrivateCloudProfile), err
}

// Update takes the representation of a privateCloudProfile and updates it. Returns the server's representation of the privateCloudProfile, and an error, if there is any.
func (c *FakePrivateCloudProfiles) Update(ctx context.Context, privateCloudProfile *core.PrivateCloudProfile, opts v1.UpdateOptions) (result *core.PrivateCloudProfile, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(privatecloudprofilesResource, c.ns, privateCloudProfile), &core.PrivateCloudProfile{})

	if obj == nil {
		return nil, err
	}
	return obj.(*core.PrivateCloudProfile), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakePrivateCloudProfiles) UpdateStatus(ctx context.Context, privateCloudProfile *core.PrivateCloudProfile, opts v1.UpdateOptions) (*core.PrivateCloudProfile, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(privatecloudprofilesResource, "status", c.ns, privateCloudProfile), &core.PrivateCloudProfile{})

	if obj == nil {
		return nil, err
	}
	return obj.(*core.PrivateCloudProfile), err
}

// Delete takes name of the privateCloudProfile and deletes it. Returns an error if one occurs.
func (c *FakePrivateCloudProfiles) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(privatecloudprofilesResource, c.ns, name, opts), &core.PrivateCloudProfile{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePrivateCloudProfiles) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(privatecloudprofilesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &core.PrivateCloudProfileList{})
	return err
}

// Patch applies the patch and returns the patched privateCloudProfile.
func (c *FakePrivateCloudProfiles) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *core.PrivateCloudProfile, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(privatecloudprofilesResource, c.ns, name, pt, data, subresources...), &core.PrivateCloudProfile{})

	if obj == nil {
		return nil, err
	}
	return obj.(*core.PrivateCloudProfile), err
}
