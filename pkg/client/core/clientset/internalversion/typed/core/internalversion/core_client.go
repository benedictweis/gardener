// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package internalversion

import (
	"net/http"

	"github.com/gardener/gardener/pkg/client/core/clientset/internalversion/scheme"
	rest "k8s.io/client-go/rest"
)

type CoreInterface interface {
	RESTClient() rest.Interface
	BackupBucketsGetter
	BackupEntriesGetter
	CloudProfilesGetter
	ControllerDeploymentsGetter
	ControllerInstallationsGetter
	ControllerRegistrationsGetter
	ExposureClassesGetter
	InternalSecretsGetter
	PrivateCloudProfilesGetter
	ProjectsGetter
	QuotasGetter
	SecretBindingsGetter
	SeedsGetter
	ShootsGetter
	ShootStatesGetter
}

// CoreClient is used to interact with features provided by the core.gardener.cloud group.
type CoreClient struct {
	restClient rest.Interface
}

func (c *CoreClient) BackupBuckets() BackupBucketInterface {
	return newBackupBuckets(c)
}

func (c *CoreClient) BackupEntries(namespace string) BackupEntryInterface {
	return newBackupEntries(c, namespace)
}

func (c *CoreClient) CloudProfiles() CloudProfileInterface {
	return newCloudProfiles(c)
}

func (c *CoreClient) ControllerDeployments() ControllerDeploymentInterface {
	return newControllerDeployments(c)
}

func (c *CoreClient) ControllerInstallations() ControllerInstallationInterface {
	return newControllerInstallations(c)
}

func (c *CoreClient) ControllerRegistrations() ControllerRegistrationInterface {
	return newControllerRegistrations(c)
}

func (c *CoreClient) ExposureClasses() ExposureClassInterface {
	return newExposureClasses(c)
}

func (c *CoreClient) InternalSecrets(namespace string) InternalSecretInterface {
	return newInternalSecrets(c, namespace)
}

func (c *CoreClient) PrivateCloudProfiles(namespace string) PrivateCloudProfileInterface {
	return newPrivateCloudProfiles(c, namespace)
}

func (c *CoreClient) Projects() ProjectInterface {
	return newProjects(c)
}

func (c *CoreClient) Quotas(namespace string) QuotaInterface {
	return newQuotas(c, namespace)
}

func (c *CoreClient) SecretBindings(namespace string) SecretBindingInterface {
	return newSecretBindings(c, namespace)
}

func (c *CoreClient) Seeds() SeedInterface {
	return newSeeds(c)
}

func (c *CoreClient) Shoots(namespace string) ShootInterface {
	return newShoots(c, namespace)
}

func (c *CoreClient) ShootStates(namespace string) ShootStateInterface {
	return newShootStates(c, namespace)
}

// NewForConfig creates a new CoreClient for the given config.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*CoreClient, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	httpClient, err := rest.HTTPClientFor(&config)
	if err != nil {
		return nil, err
	}
	return NewForConfigAndClient(&config, httpClient)
}

// NewForConfigAndClient creates a new CoreClient for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
func NewForConfigAndClient(c *rest.Config, h *http.Client) (*CoreClient, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientForConfigAndClient(&config, h)
	if err != nil {
		return nil, err
	}
	return &CoreClient{client}, nil
}

// NewForConfigOrDie creates a new CoreClient for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *CoreClient {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new CoreClient for the given RESTClient.
func New(c rest.Interface) *CoreClient {
	return &CoreClient{c}
}

func setConfigDefaults(config *rest.Config) error {
	config.APIPath = "/apis"
	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}
	if config.GroupVersion == nil || config.GroupVersion.Group != scheme.Scheme.PrioritizedVersionsForGroup("core.gardener.cloud")[0].Group {
		gv := scheme.Scheme.PrioritizedVersionsForGroup("core.gardener.cloud")[0]
		config.GroupVersion = &gv
	}
	config.NegotiatedSerializer = scheme.Codecs

	if config.QPS == 0 {
		config.QPS = 5
	}
	if config.Burst == 0 {
		config.Burst = 10
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *CoreClient) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
